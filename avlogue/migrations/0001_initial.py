# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-05-19 19:55
from __future__ import unicode_literals

import avlogue.utils
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Audio',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_codec', models.CharField(choices=[(b'pcm_f32le', b'pcm_f32le'), (b'pcm_s16be', b'pcm_s16be'), (b'aac', b'aac'), (b'vorbis', b'vorbis'), (b'ac3', b'ac3'), (b'mp3', b'mp3')], max_length=20, verbose_name='audio codec')),
                ('audio_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio bitrate')),
                ('audio_channels', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio channels')),
                ('bitrate', models.PositiveIntegerField(verbose_name='average file bitrate')),
                ('duration', models.FloatField(verbose_name='duration')),
                ('size', models.PositiveIntegerField(verbose_name='size')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='title')),
                ('slug', models.SlugField(help_text='A "slug" is a unique URL-friendly title for an object.', unique=True, verbose_name='title slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('file', models.FileField(upload_to=b'avlogue/audio', validators=[avlogue.utils.ContentTypeValidator((b'audio/.*',), message='Only audio files are allowed.')], verbose_name='file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AudioFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_codec', models.CharField(choices=[(b'pcm_f32le', b'pcm_f32le'), (b'pcm_s16be', b'pcm_s16be'), (b'aac', b'aac'), (b'vorbis', b'vorbis'), (b'ac3', b'ac3'), (b'mp3', b'mp3')], max_length=20, verbose_name='audio codec')),
                ('audio_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio bitrate')),
                ('audio_channels', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio channels')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('container', models.CharField(choices=[(b'ac3', b'ac3'), (b'wav', b'wav'), (b'aiff', b'aiff'), (b'ogg', b'ogg'), (b'mp3', b'mp3')], max_length=10, verbose_name='container format')),
                ('audio_codec_params', models.CharField(blank=True, help_text='Raw options to configure a selected audio codec', max_length=400, verbose_name='audio codec params')),
            ],
            options={
                'verbose_name': 'audio format',
                'verbose_name_plural': 'audio formats',
            },
        ),
        migrations.CreateModel(
            name='AudioFormatSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('formats', models.ManyToManyField(to='avlogue.AudioFormat', verbose_name='formats')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AudioStream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_codec', models.CharField(choices=[(b'pcm_f32le', b'pcm_f32le'), (b'pcm_s16be', b'pcm_s16be'), (b'aac', b'aac'), (b'vorbis', b'vorbis'), (b'ac3', b'ac3'), (b'mp3', b'mp3')], max_length=20, verbose_name='audio codec')),
                ('audio_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio bitrate')),
                ('audio_channels', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio channels')),
                ('bitrate', models.PositiveIntegerField(verbose_name='average file bitrate')),
                ('duration', models.FloatField(verbose_name='duration')),
                ('size', models.PositiveIntegerField(verbose_name='size')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='created')),
                ('file', models.FileField(upload_to=b'avlogue/audio/streams', verbose_name='stream file')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avlogue.AudioFormat')),
                ('media_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streams', to='avlogue.Audio')),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_codec', models.CharField(choices=[(b'pcm_f32le', b'pcm_f32le'), (b'pcm_s16be', b'pcm_s16be'), (b'aac', b'aac'), (b'vorbis', b'vorbis'), (b'ac3', b'ac3'), (b'mp3', b'mp3')], max_length=20, verbose_name='audio codec')),
                ('audio_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio bitrate')),
                ('audio_channels', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio channels')),
                ('video_codec', models.CharField(choices=[(b'h264', b'h264'), (b'mpeg4', b'mpeg4'), (b'vp8', b'vp8')], max_length=20, verbose_name='video codec')),
                ('video_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='video bitrate')),
                ('video_width', models.IntegerField(blank=True, null=True, verbose_name='video width')),
                ('video_height', models.IntegerField(blank=True, null=True, verbose_name='video height')),
                ('bitrate', models.PositiveIntegerField(verbose_name='average file bitrate')),
                ('duration', models.FloatField(verbose_name='duration')),
                ('size', models.PositiveIntegerField(verbose_name='size')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='title')),
                ('slug', models.SlugField(help_text='A "slug" is a unique URL-friendly title for an object.', unique=True, verbose_name='title slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date published')),
                ('file', models.FileField(upload_to=b'avlogue/video', validators=[avlogue.utils.ContentTypeValidator((b'video/.*',), message='Only video files are allowed.')], verbose_name='file')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_codec', models.CharField(choices=[(b'pcm_f32le', b'pcm_f32le'), (b'pcm_s16be', b'pcm_s16be'), (b'aac', b'aac'), (b'vorbis', b'vorbis'), (b'ac3', b'ac3'), (b'mp3', b'mp3')], max_length=20, verbose_name='audio codec')),
                ('audio_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio bitrate')),
                ('audio_channels', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio channels')),
                ('video_codec', models.CharField(choices=[(b'h264', b'h264'), (b'mpeg4', b'mpeg4'), (b'vp8', b'vp8')], max_length=20, verbose_name='video codec')),
                ('video_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='video bitrate')),
                ('video_width', models.IntegerField(blank=True, null=True, verbose_name='video width')),
                ('video_height', models.IntegerField(blank=True, null=True, verbose_name='video height')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('container', models.CharField(choices=[(b'mkv', b'mkv'), (b'mp4', b'mp4'), (b'flv', b'flv'), (b'avi', b'avi'), (b'webm', b'webm')], max_length=10, verbose_name='container format')),
                ('audio_codec_params', models.CharField(blank=True, help_text='Raw options to configure a selected audio codec', max_length=400, verbose_name='audio codec params')),
                ('video_codec_params', models.CharField(blank=True, help_text='Raw options to configure a selected video codec', max_length=400, verbose_name='video codec params')),
                ('video_aspect_mode', models.CharField(choices=[(b'scale', 'scale'), (b'scale_crop', 'scale and crop')], default=b'scale', help_text='Aspect mode is only used if both video width and height sizes are specified,otherwise aspect mode will be ignored.', max_length=10, verbose_name='video aspect mode')),
            ],
            options={
                'verbose_name': 'video format',
                'verbose_name_plural': 'video formats',
            },
        ),
        migrations.CreateModel(
            name='VideoFormatSet',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('formats', models.ManyToManyField(to='avlogue.VideoFormat', verbose_name='formats')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VideoStream',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('audio_codec', models.CharField(choices=[(b'pcm_f32le', b'pcm_f32le'), (b'pcm_s16be', b'pcm_s16be'), (b'aac', b'aac'), (b'vorbis', b'vorbis'), (b'ac3', b'ac3'), (b'mp3', b'mp3')], max_length=20, verbose_name='audio codec')),
                ('audio_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio bitrate')),
                ('audio_channels', models.PositiveIntegerField(blank=True, null=True, verbose_name='audio channels')),
                ('video_codec', models.CharField(choices=[(b'h264', b'h264'), (b'mpeg4', b'mpeg4'), (b'vp8', b'vp8')], max_length=20, verbose_name='video codec')),
                ('video_bitrate', models.PositiveIntegerField(blank=True, null=True, verbose_name='video bitrate')),
                ('video_width', models.IntegerField(blank=True, null=True, verbose_name='video width')),
                ('video_height', models.IntegerField(blank=True, null=True, verbose_name='video height')),
                ('bitrate', models.PositiveIntegerField(verbose_name='average file bitrate')),
                ('duration', models.FloatField(verbose_name='duration')),
                ('size', models.PositiveIntegerField(verbose_name='size')),
                ('created', models.DateTimeField(auto_now=True, verbose_name='created')),
                ('file', models.FileField(upload_to=b'avlogue/video/streams', verbose_name='stream file')),
                ('format', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='avlogue.VideoFormat')),
                ('media_file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='streams', to='avlogue.Video')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='videostream',
            unique_together=set([('media_file', 'format')]),
        ),
        migrations.AlterUniqueTogether(
            name='audiostream',
            unique_together=set([('media_file', 'format')]),
        ),
    ]
